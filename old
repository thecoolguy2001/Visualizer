<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Music Visualizer</title>
    <style>
        body, html { margin: 0; overflow: hidden; }
        #info {
            position: absolute; top: 50%; left: 50%;
            transform: translate(-50%, -50%);
            color: grey; text-align: center;
            font-family: Arial, sans-serif;
        }
    </style>
</head>
<body>
    <div id="info">press spacebar to start</div>
    <audio id="audio" preload="auto">
        <source src="london.mp3" type="audio/mp3">
    </audio>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js"></script>
    <script>
        const audioElement = document.getElementById('audio');
        const audioContext = new (window.AudioContext || window.webkitAudioContext)();
        const audioSrc = audioContext.createMediaElementSource(audioElement);
        const analyser = audioContext.createAnalyser();
        audioSrc.connect(analyser);
        analyser.connect(audioContext.destination);
        analyser.fftSize = 256;
        const bufferLength = analyser.frequencyBinCount;
        const dataArray = new Uint8Array(bufferLength);

        let camera, scene, renderer, intensityLevel = 1;
        let currentStyleIndex = Math.floor(Math.random() * 4); // Randomly select an initial style
        let visualElements = [];
        let isPlaying = false;
        let isUsingDefaultAudio = true; // Flag to track audio source status

        function init() {
            scene = new THREE.Scene();
            camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
            camera.position.z = 500;

            renderer = new THREE.WebGLRenderer();
            renderer.setSize(window.innerWidth, window.innerHeight);
            document.body.appendChild(renderer.domElement);

            createVisualElements();
            window.addEventListener('resize', onWindowResize, false);
            document.body.addEventListener('keydown', onKeyDown, false);

            animate();
        }

        function createParticles() {
            const particleCount = 5000;
            const positions = new Float32Array(particleCount * 3);
            const colors = new Float32Array(particleCount * 3);
            for (let i = 0; i < particleCount; i++) {
                // positions
                positions[i * 3] = (Math.random() - 0.5) * 1000; // x
                positions[i * 3 + 1] = (Math.random() - 0.5) * 1000; // y
                positions[i * 3 + 2] = (Math.random() - 0.5) * 1000; // z
                // colors
                colors[i * 3] = Math.random(); // r
                colors[i * 3 + 1] = Math.random(); // g
                colors[i * 3 + 2] = Math.random(); // b
            }
            const geometry = new THREE.BufferGeometry();
            geometry.setAttribute('position', new THREE.BufferAttribute(positions, 3));
            geometry.setAttribute('color', new THREE.BufferAttribute(colors, 3));
            const material = new THREE.PointsMaterial({ size: 2, vertexColors: true });
            const particles = new THREE.Points(geometry, material);
            scene.add(particles);
            visualElements.push(particles);
        }

        function createWaves() {
            const waveCount = 100;
            const waveGeometry = new THREE.PlaneGeometry(1000, 10, waveCount, 1);
            const waveMaterial = new THREE.MeshBasicMaterial({ color: 0x00ff00, wireframe: true, transparent: true, opacity: 0.5 });
            const wave = new THREE.Mesh(waveGeometry, waveMaterial);
            wave.rotation.x = -Math.PI / 2;
            scene.add(wave);
            visualElements.push(wave);
        }

        function create3DWaves() {
            const geometry = new THREE.PlaneGeometry(1000, 1000, 20, 20);
            const material = new THREE.MeshBasicMaterial({ color: 0x00ffdd, wireframe: true, transparent: true, opacity: 0.5 });
            const plane = new THREE.Mesh(geometry, material);
            plane.rotation.x = -Math.PI / 2; // Orient the plane horizontally
            scene.add(plane);
            visualElements.push(plane);
        }

        function createTrippyColors() {
            const geometry = new THREE.PlaneGeometry(2000, 2000, 1, 1);
            const material = new THREE.ShaderMaterial( {
                uniforms: {
                    time: { value: 1.0 },
                    resolution: { value: new THREE.Vector2() }
                },
                vertexShader: `varying vec2 vUv;
                void main() {
                    vUv = uv;
                    gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);
                }`,
                fragmentShader: `uniform float time;
                uniform vec2 resolution;
                varying vec2 vUv;
                void main() {
                    vec2 p = -1.0 + 2.0 * vUv;
                    float a = time * 40.0;
                    float d,e,f,g=1.0/40.0,h,i,r,q;
                    e=400.0*(p.x*0.5+0.5);
                    f=400.0*(p.y*0.5+0.5);
                    i=200.0+sin(e*g+a/150.0)*20.0;
                    d=200.0+cos(f*g/2.0)*18.0+cos(e*g)*7.0;
                    r=sqrt(pow(i-e,2.0)+pow(d-f,2.0));
                    q=f/r;
                    e=(r*cos(q))-a/2.0;f=(r*sin(q))-a/2.0;
                    d=sin(e*g)*176.0+sin(e*g)*164.0+r;
                    h=((f+d)+a/2.0)*g;
                    i=cos(h+g/2.0)*184.0+cos(h)*176.0+sin(h)*174.0;
                    gl_FragColor = vec4((f+i)/256.0,(i+h)/256.0,(h+d)/256.0,1.0);
                }`,
            });
            const trippy = new THREE.Mesh(geometry, material);
            scene.add(trippy);
            visualElements.push(trippy);
        }

        function createVisualElements() {
            createParticles();
            createWaves();
            create3DWaves();
            createTrippyColors();
            updateVisibility(); // Show only the selected style
        }

        function updateVisibility() {
            visualElements.forEach((elem, index) => {
                elem.visible = (index === currentStyleIndex);
            });
        }
        function animate() {
    requestAnimationFrame(animate);

    if (!isPlaying) {
        // Initial complex animations (before music starts)
        animateInitialEffects();
    } else {
        // Audio-reactive animations (once music is playing)
        animateAudioReactiveEffects();
    }

    renderer.render(scene, camera);
}
function animateInitialEffects() {
    // Particle System Animation
    const trippyEffect = visualElements.find(elem => elem instanceof THREE.Mesh && elem.material instanceof THREE.ShaderMaterial);
    if (trippyEffect) {
        trippyEffect.material.uniforms.time.value += 0.05; // Increment shader time
    }
   // Trippy Colors Animation
    const particleSystem = visualElements.find(elem => elem instanceof THREE.Points);
    
    if (particleSystem) {
        // For the particle system, you might want to rotate it or animate it in some other way
        particleSystem.rotation.y += 0.01 * intensityLevel;

        // If you want to animate individual particles, you'd typically need to update the positions in the geometry's attribute
        // This is a bit more complex and depends on your specific needs and setup
    }
    // Waves Animation
    const waveEffect = visualElements.find(elem => elem instanceof THREE.Line || (elem instanceof THREE.Mesh && elem.name === 'Waves'));
    if (waveEffect) {
        const time = Date.now() * 0.001;
    const waveGeometry = waveEffect.geometry;
    waveGeometry.vertices.forEach((vertex, i) => {
        vertex.z = Math.sin(i * 0.1 + time) * 5; // Create a sine wave effect along the z-axis
    });
    waveGeometry.verticesNeedUpdate = true; // Important: Inform Three.js that the geometry has changed
}

    // 3D Waves Animation
    const wave3DEffect = visualElements.find(elem => elem instanceof THREE.Mesh && elem.geometry instanceof THREE.PlaneGeometry && elem.name === '3DWaves');
    if (wave3DEffect) {
        wave3DEffect.rotation.x += 0.01 * intensityLevel; // Example rotation animation
        // Similar to waves, for more complexity, consider modifying vertices or material properties
    }
    

}

function animateAudioReactiveEffects() {
    if (!audioElement.paused) {
        analyser.getByteFrequencyData(dataArray);
        if (visualElements[0] && visualElements[0].visible) {
                    let sum = 0;
                    for (let i = 0; i < dataArray.length; i++) {
                        sum += dataArray[i];
                    }
                    let average = sum / dataArray.length;
                    // Adjust particles based on the average frequency value
                    visualElements[0].rotation.y += (0.01 * intensityLevel) + (average * 0.0001);
                }

        // Modify this function to update visuals based on dataArray
        // Example: Adjust the trippyEffect based on audio data
    }
}


        function onWindowResize() {
            camera.aspect = window.innerWidth / window.innerHeight;
            camera.updateProjectionMatrix();
            renderer.setSize(window.innerWidth, window.innerHeight);
        }

        function onKeyDown(event) {
            switch (event.key) {
                case ' ':
                    togglePlayPause();
                    break;
                case 'm':
                    audioElement.muted = !audioElement.muted;
                    break;
                case 'ArrowLeft':
                    currentStyleIndex = (currentStyleIndex - 1 + visualElements.length) % visualElements.length;
                    updateVisibility();
                    break;
                case 'ArrowRight':
                    currentStyleIndex = (currentStyleIndex + 1) % visualElements.length;
                    updateVisibility();
                    break;
                    case 'ArrowUp':
        case 'ArrowDown':
            if (isUsingDefaultAudio) {
                // Trigger file input click to select a new file
                document.getElementById('fileInput').click();
            } else {
                // Switch back to default audio
                audioElement.src = "london.mp3"; // Adjust this path as necessary
                audioElement.load();
                audioElement.play();
                isUsingDefaultAudio = true;
            }
            break;
        default:
            if (event.key >= '1' && event.key <= '9') {
                intensityLevel = parseInt(event.key);
                adjustVisualEffectsIntensity();
            }
            break;
    }
}
                    function adjustVisualEffectsIntensity() {
                        // Assuming each visual effect responds to intensity changes differently, you might have a switch or if-else structure here
                        visualElements.forEach((element, index) => {
                            switch (index) {
                                case 0: // Example for particles
                                element.material.size = 2 * intensityLevel; // Adjust particle size
                                break;
                                case 1: // Example for waves
                                // Assuming waves are a mesh with a geometry that can be modified
                                element.geometry.vertices.forEach(vertex => {
                                    vertex.z = Math.sin(vertex.x * 0.5 + vertex.y * 0.5) * 5 * intensityLevel;
                                });
                                element.geometry.verticesNeedUpdate = true;
                                break;
                                case 2: // Example for 3D waves
                                // Similar to 2D waves, but maybe with different parameters for 3D effect
                                element.geometry.vertices.forEach(vertex => {
                                    vertex.z = Math.sin(vertex.x * 0.2 + vertex.y * 0.2) * 10 * intensityLevel;
                                });
                                element.geometry.verticesNeedUpdate = true;
                                break;
                                case 3: // Example for trippy colors
                                if(element.material && element.material.uniforms) {
                                    // Assuming trippy colors are influenced by a shader uniform that controls intensity
                                    element.material.uniforms.intensity.value = intensityLevel;
                                }
                                break;
                            }
                        });
                    }
              
function handleFileSelect(event) {
    const file = event.target.files[0];
    if (!file.type.match('audio/mp3')) {
        alert("Please select an MP3 file.");
        return;
    }

    // Play the selected file
    const url = URL.createObjectURL(file);
    audioElement.src = url;
    audioElement.load();
    audioElement.play();
    isUsingDefaultAudio = false; // Update flag since we're now using a custom audio file
}


       function togglePlayPause() {
    if (isPlaying) {
        audioElement.pause();
        document.getElementById('info').textContent = "Press Spacebar to Start"; // Show play message
    } else {
        if (audioContext.state === 'suspended') {
            audioContext.resume();
        }
        audioElement.play();
        document.getElementById('info').textContent = ""; // Hide message
    }
    isPlaying = !isPlaying; // Toggle the play state
}

        document.body.addEventListener('keydown', (event) => {
            if (event.key === ' ') {
                event.preventDefault(); // Prevent scrolling on spacebar press in some browsers
                if (!audioContext) {
                    initAudio(); // Initialize audio context and connections
                }
                togglePlayPause();
            }
            function initAudio() {
                audioContext = new (window.AudioContext || window.webkitAudioContext)();
                audioSrc = audioContext.createMediaElementSource(audioElement);
                analyser = audioContext.createAnalyser();
                audioSrc.connect(analyser);
                analyser.connect(audioContext.destination);
                analyser.fftSize = 256;
                dataArray = new Uint8Array(analyser.frequencyBinCount);
            }
        }
        , false);

        init();
    </script>
</body>
</html>
